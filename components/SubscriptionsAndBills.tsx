import React, { useState } from 'react';
import Card from './ui/Card';
import Button from './ui/Button';
import type { RecurringPayment, Transaction } from '../types';
import { PlusIcon, SparklesIcon, TrashIcon, PencilIcon, CalendarIcon, CheckCircleIcon } from '../constants';
import AddEditSubscriptionModal from './AddEditSubscriptionModal';
import { useToast } from '../contexts/ToastContext';
import { formatDueDate } from '../services/dateUtils';
import { findRecurringPayments, PotentialSubscription } from '../services/geminiService';


interface SubscriptionsAndBillsProps {
    currencySymbol: string;
    recurringPayments: RecurringPayment[];
    transactions: Transaction[];
    expenseCategories: string[];
    onSavePayment: (payment: Omit<RecurringPayment, 'id'>) => Promise<boolean>;
    onUpdatePayment: (payment: RecurringPayment) => Promise<void>;
    onDeletePayment: (id: string) => Promise<void>;
    onMarkBillAsPaid: (payment: RecurringPayment) => void;
}

const SubscriptionsAndBills: React.FC<SubscriptionsAndBillsProps> = ({ 
    currencySymbol, 
    recurringPayments, 
    transactions, 
    expenseCategories,
    onSavePayment,
    onUpdatePayment,
    onDeletePayment,
    onMarkBillAsPaid
}) => {
    const { addToast } = useToast();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingPayment, setEditingPayment] = useState<RecurringPayment | null>(null);
    const [isAiLoading, setIsAiLoading] = useState(false);
    const [aiSuggestions, setAiSuggestions] = useState<PotentialSubscription[]>([]);

    const handleOpenModal = (payment: RecurringPayment | null) => {
        setEditingPayment(payment);
        setIsModalOpen(true);
    };

    const handleSavePayment = async (paymentData: Omit<RecurringPayment, 'id'>) => {
        if (editingPayment) {
            // Update
            const updatedPayment: RecurringPayment = { ...editingPayment, ...paymentData };
            await onUpdatePayment(updatedPayment);
            addToast('Subscription updated!');
        } else {
            // Add
            const success = await onSavePayment(paymentData);
            if(success) addToast('Subscription added!');
        }
        setIsModalOpen(false);
    };

    const handleDeletePayment = (id: string) => {
        if (window.confirm("Are you sure you want to delete this recurring payment?")) {
            onDeletePayment(id);
            addToast('Subscription deleted.', 'info');
        }
    };
    
    const handleFindWithAI = async () => {
        setIsAiLoading(true);
        setAiSuggestions([]);
        try {
            const suggestions = await findRecurringPayments(transactions);
            // Filter out suggestions that already exist as recurring payments
            const existingNames = new Set(recurringPayments.map(p => p.name.toLowerCase()));
            const newSuggestions = suggestions.filter(s => !existingNames.has(s.name.toLowerCase()));
            
            setAiSuggestions(newSuggestions);

            if (newSuggestions.length === 0) {
                addToast("AI couldn't find any new recurring payments.", 'info');
            }
        } catch (e) {
            addToast(e.message, 'error');
        } finally {
            setIsAiLoading(false);
        }
    };

    const handleAddSuggestion = (suggestion: PotentialSubscription) => {
        const newPayment: RecurringPayment = {
            id: '', // Will be generated by parent
            name: suggestion.name,
            amount: suggestion.estimatedAmount,
            isVariable: true, // Good default for AI suggestions
            category: expenseCategories.includes('Bills & Utilities') ? 'Bills & Utilities' : expenseCategories[0] || 'General',
            billingCycle: suggestion.frequency === 'unknown' ? 'monthly' : suggestion.frequency,
            nextDueDate: new Date().toISOString(), // User must confirm this
            isActive: true,
        };
        setEditingPayment(newPayment);
        setIsModalOpen(true);
        setAiSuggestions(prev => prev.filter(s => s.name !== suggestion.name));
    };

    return (
        <div className="space-y-6">
            <Card>
                <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-bold text-text-primary">Subscriptions & Bills</h3>
                </div>
                {aiSuggestions.length > 0 && (
                    <div className="mb-6 bg-bg-primary p-4 rounded-lg">
                        <h4 className="font-bold text-accent-primary mb-3">AI Suggestions</h4>
                        <div className="space-y-2">
                            {aiSuggestions.map((s, i) => (
                                <div key={i} className="flex justify-between items-center text-sm">
                                    <div>
                                        <p className="font-semibold text-text-primary">{s.name}</p>
                                        <p className="text-text-secondary">~{currencySymbol}{s.estimatedAmount} / {s.frequency}</p>
                                    </div>
                                    <Button onClick={() => handleAddSuggestion(s)} variant="secondary" className="px-3 py-1 text-xs">Add</Button>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
                <div className="space-y-3">
                    {recurringPayments.map(payment => {
                        const dueDateInfo = formatDueDate(payment.nextDueDate);
                        const isDue = dueDateInfo.isPast || dueDateInfo.text === 'Due today';
                        return (
                            <div key={payment.id} className="bg-bg-primary p-3 rounded-md">
                                <div className="flex items-center justify-between">
                                    <div className="flex items-center gap-3">
                                        <CalendarIcon className={`w-6 h-6 flex-shrink-0 ${dueDateInfo.isPast ? 'text-accent-secondary' : 'text-accent-primary'}`} />
                                        <div>
                                            <p className="font-semibold text-text-primary">{payment.name}</p>
                                            <p className="text-xs text-text-secondary">{payment.category} &middot; <span className="capitalize">{payment.billingCycle}</span></p>
                                            <p className={`text-xs font-bold mt-1 ${dueDateInfo.isPast ? 'text-accent-secondary' : 'text-text-secondary'}`}>{dueDateInfo.text}</p>
                                        </div>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <p className="font-bold text-text-primary text-right">
                                            {payment.isVariable && '~'}{currencySymbol}{payment.amount.toLocaleString()}
                                        </p>
                                        <button onClick={() => handleOpenModal(payment)} className="text-text-secondary hover:text-accent-primary"><PencilIcon className="w-4 h-4" /></button>
                                        <button onClick={() => handleDeletePayment(payment.id)} className="text-text-secondary hover:text-accent-secondary"><TrashIcon className="w-4 h-4" /></button>
                                    </div>
                                </div>
                                {isDue && (
                                    <Button onClick={() => onMarkBillAsPaid(payment)} className="w-full mt-3 text-sm py-1.5">
                                        <CheckCircleIcon className="w-5 h-5" /> Mark as Paid
                                    </Button>
                                )}
                            </div>
                        );
                    })}
                </div>
                 <div className="flex gap-4 mt-6">
                    <Button onClick={() => handleOpenModal(null)} variant="secondary" className="w-full">
                        <PlusIcon className="w-5 h-5"/> Add Manually
                    </Button>
                    <Button onClick={handleFindWithAI} className="w-full" disabled={isAiLoading}>
                        {isAiLoading ? 'Analyzing...' : <><SparklesIcon className="w-5 h-5"/> Find with AI</>}
                    </Button>
                </div>
            </Card>

            <AddEditSubscriptionModal
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
                onSave={handleSavePayment}
                payment={editingPayment}
                expenseCategories={expenseCategories}
                currencySymbol={currencySymbol}
            />
        </div>
    );
};

export default SubscriptionsAndBills;